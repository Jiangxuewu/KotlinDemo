package com.bb_sz.lib.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.transsnet.note.model.structure.Task;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "TASK";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Done_time = new Property(1, String.class, "done_time", false, "DONE_TIME");
        public final static Property Stick_time = new Property(2, String.class, "stick_time", false, "STICK_TIME");
        public final static Property Uid = new Property(3, int.class, "uid", false, "UID");
        public final static Property List_id = new Property(4, String.class, "list_id", false, "LIST_ID");
        public final static Property Client_time = new Property(5, String.class, "client_time", false, "CLIENT_TIME");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property Checksum = new Property(7, String.class, "checksum", false, "CHECKSUM");
        public final static Property Create_time = new Property(8, String.class, "create_time", false, "CREATE_TIME");
        public final static Property Modify_time = new Property(9, String.class, "modify_time", false, "MODIFY_TIME");
        public final static Property State = new Property(10, int.class, "state", false, "STATE");
        public final static Property Isupload = new Property(11, boolean.class, "isupload", false, "ISUPLOAD");
    }


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"DONE_TIME\" TEXT," + // 1: done_time
                "\"STICK_TIME\" TEXT," + // 2: stick_time
                "\"UID\" INTEGER NOT NULL ," + // 3: uid
                "\"LIST_ID\" TEXT," + // 4: list_id
                "\"CLIENT_TIME\" TEXT," + // 5: client_time
                "\"CONTENT\" TEXT," + // 6: content
                "\"CHECKSUM\" TEXT," + // 7: checksum
                "\"CREATE_TIME\" TEXT," + // 8: create_time
                "\"MODIFY_TIME\" TEXT," + // 9: modify_time
                "\"STATE\" INTEGER NOT NULL ," + // 10: state
                "\"ISUPLOAD\" INTEGER NOT NULL );"); // 11: isupload
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String done_time = entity.getDone_time();
        if (done_time != null) {
            stmt.bindString(2, done_time);
        }
 
        String stick_time = entity.getStick_time();
        if (stick_time != null) {
            stmt.bindString(3, stick_time);
        }
        stmt.bindLong(4, entity.getUid());
 
        String list_id = entity.getList_id();
        if (list_id != null) {
            stmt.bindString(5, list_id);
        }
 
        String client_time = entity.getClient_time();
        if (client_time != null) {
            stmt.bindString(6, client_time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String checksum = entity.getChecksum();
        if (checksum != null) {
            stmt.bindString(8, checksum);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(9, create_time);
        }
 
        String modify_time = entity.getModify_time();
        if (modify_time != null) {
            stmt.bindString(10, modify_time);
        }
        stmt.bindLong(11, entity.getState());
        stmt.bindLong(12, entity.getIsupload() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String done_time = entity.getDone_time();
        if (done_time != null) {
            stmt.bindString(2, done_time);
        }
 
        String stick_time = entity.getStick_time();
        if (stick_time != null) {
            stmt.bindString(3, stick_time);
        }
        stmt.bindLong(4, entity.getUid());
 
        String list_id = entity.getList_id();
        if (list_id != null) {
            stmt.bindString(5, list_id);
        }
 
        String client_time = entity.getClient_time();
        if (client_time != null) {
            stmt.bindString(6, client_time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String checksum = entity.getChecksum();
        if (checksum != null) {
            stmt.bindString(8, checksum);
        }
 
        String create_time = entity.getCreate_time();
        if (create_time != null) {
            stmt.bindString(9, create_time);
        }
 
        String modify_time = entity.getModify_time();
        if (modify_time != null) {
            stmt.bindString(10, modify_time);
        }
        stmt.bindLong(11, entity.getState());
        stmt.bindLong(12, entity.getIsupload() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // done_time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stick_time
            cursor.getInt(offset + 3), // uid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // list_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // client_time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // checksum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // create_time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // modify_time
            cursor.getInt(offset + 10), // state
            cursor.getShort(offset + 11) != 0 // isupload
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDone_time(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStick_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUid(cursor.getInt(offset + 3));
        entity.setList_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClient_time(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setChecksum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCreate_time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setModify_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setState(cursor.getInt(offset + 10));
        entity.setIsupload(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
